apply plugin: 'com.android.application'

android {
    compileSdkVersion 26

    defaultConfig {
        applicationId "com.me.harris.cloak"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled  true
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }



}

afterEvaluate { project ->
    logger.info("=========afterEvaluate==============")
    project.tasks.each { task ->
        if (task.name == "test"||task.name.contains("lint")){
            task.enabled = false
        }
//        task.enabled = false
       println("-------------${task.name}----")
    }
}

tasks.whenTaskAdded { task->
    logger.info("you catch me ${task.name} is this enabled ${task.enabled}")
}

task iDependOnAssembleFlavor1(dependsOn: preBuild) {
    doLast {
        println 'I need assembleFlavor1 to run before me.'
    }
}




gradle.afterProject {project, projectState ->
    if (projectState.failure) {
        println "Evaluation of $project FAILED"
    } else {
        println "Evaluation of $project succeeded"
    }
}

android.applicationVariants.all { variant ->
    println("==========${variant.name}=======")
//    project.task "fix${variant.name.capitalize()}MainDexClassList"  {
//        doLast {
//            println("=============$variant.name=====================")
//            Map stuff = asMap("1","2")
//            logger.info "Hello there ${stuff.size()}"
//            logger.info "Fixing main dex keep file for $variant.name"
//            File keepFile = new File("$buildDir/intermediates/multi-dex/$variant.buildType.name/maindexlist.txt")
//            keepFile.withWriterAppend { w ->
//                // Get a reader for the input file
//                w.append('\n')
//                new File("${projectDir}/multidex.keep").withReader { r ->
//                    // And write data from the input into the output
//                    w << r << '\n'
//                }
//                logger.info "Updated main dex keep file for ${keepFile.getAbsolutePath()}\n$keepFile.text"
//            }
//        }
//    }
}

def asMap(arg1, arg2) {
    return [arg1: arg2]
}

Map asMapWithTypedArgs(String arg1, String arg2) {
    return [arg1: arg2]
}


tasks.whenTaskAdded { task ->
    android.applicationVariants.all { variant ->
        if (task.name == "create${variant.name.capitalize()}MainDexClassList") {
            task.finalizedBy "fix${variant.name.capitalize()}MainDexClassList"
        }
    }
}



repositories {
        maven {
            url 'https://dl.bintray.com/jllk/maven/'
        }
}

buildscript {
    repositories {
        maven {
            url uri('../repo')
        }

    }
    dependencies {
        classpath group: 'com.johndoe', name: 'dexcount', version: '1.0.2'
    }
}

apply plugin: 'com.johndoe.dexcountplugin'


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-vector-drawable:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation project(':lazydex')
}

task('hello3') {
    doLast {
        println "hello3=============="
    }
}

